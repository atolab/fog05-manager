/*
* Copyright (c) 2018,2021 ADLINK Technology Inc.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
* which is available at https://www.apache.org/licenses/LICENSE-2.0.
*
* SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
* Contributors:
*   ADLINK fog05 team, <fog05@adlink-labs.tech>
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/atolab/fog05-manager/pkg/apis/fdu/v1"
	"github.com/atolab/fog05-manager/pkg/client/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type Fog05V1Interface interface {
	RESTClient() rest.Interface
	FDUsGetter
}

// Fog05V1Client is used to interact with features provided by the fog05.com group.
type Fog05V1Client struct {
	restClient rest.Interface
}

func (c *Fog05V1Client) FDUs(namespace string) FDUInterface {
	return newFDUs(c, namespace)
}

// NewForConfig creates a new Fog05V1Client for the given config.
func NewForConfig(c *rest.Config) (*Fog05V1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientFor(&config)
	if err != nil {
		return nil, err
	}
	return &Fog05V1Client{client}, nil
}

// NewForConfigOrDie creates a new Fog05V1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Fog05V1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new Fog05V1Client for the given RESTClient.
func New(c rest.Interface) *Fog05V1Client {
	return &Fog05V1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := v1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = scheme.Codecs.WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *Fog05V1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
