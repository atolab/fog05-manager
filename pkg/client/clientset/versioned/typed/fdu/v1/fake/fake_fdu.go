/*
* Copyright (c) 2018,2021 ADLINK Technology Inc.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
* which is available at https://www.apache.org/licenses/LICENSE-2.0.
*
* SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
* Contributors:
*   ADLINK fog05 team, <fog05@adlink-labs.tech>
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	fduv1 "github.com/atolab/fog05-manager/pkg/apis/fdu/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeFDUs implements FDUInterface
type FakeFDUs struct {
	Fake *FakeFog05V1
	ns   string
}

var fdusResource = schema.GroupVersionResource{Group: "fog05.com", Version: "v1", Resource: "fdus"}

var fdusKind = schema.GroupVersionKind{Group: "fog05.com", Version: "v1", Kind: "FDU"}

// Get takes name of the fDU, and returns the corresponding fDU object, and an error if there is any.
func (c *FakeFDUs) Get(ctx context.Context, name string, options v1.GetOptions) (result *fduv1.FDU, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(fdusResource, c.ns, name), &fduv1.FDU{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fduv1.FDU), err
}

// List takes label and field selectors, and returns the list of FDUs that match those selectors.
func (c *FakeFDUs) List(ctx context.Context, opts v1.ListOptions) (result *fduv1.FDUList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(fdusResource, fdusKind, c.ns, opts), &fduv1.FDUList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &fduv1.FDUList{ListMeta: obj.(*fduv1.FDUList).ListMeta}
	for _, item := range obj.(*fduv1.FDUList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested fDUs.
func (c *FakeFDUs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(fdusResource, c.ns, opts))

}

// Create takes the representation of a fDU and creates it.  Returns the server's representation of the fDU, and an error, if there is any.
func (c *FakeFDUs) Create(ctx context.Context, fDU *fduv1.FDU, opts v1.CreateOptions) (result *fduv1.FDU, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(fdusResource, c.ns, fDU), &fduv1.FDU{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fduv1.FDU), err
}

// Update takes the representation of a fDU and updates it. Returns the server's representation of the fDU, and an error, if there is any.
func (c *FakeFDUs) Update(ctx context.Context, fDU *fduv1.FDU, opts v1.UpdateOptions) (result *fduv1.FDU, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(fdusResource, c.ns, fDU), &fduv1.FDU{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fduv1.FDU), err
}

// Delete takes name of the fDU and deletes it. Returns an error if one occurs.
func (c *FakeFDUs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(fdusResource, c.ns, name), &fduv1.FDU{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeFDUs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(fdusResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &fduv1.FDUList{})
	return err
}

// Patch applies the patch and returns the patched fDU.
func (c *FakeFDUs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *fduv1.FDU, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(fdusResource, c.ns, name, pt, data, subresources...), &fduv1.FDU{})

	if obj == nil {
		return nil, err
	}
	return obj.(*fduv1.FDU), err
}
