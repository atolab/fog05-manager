/*
* Copyright (c) 2018,2021 ADLINK Technology Inc.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
* which is available at https://www.apache.org/licenses/LICENSE-2.0.
*
* SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
* Contributors:
*   ADLINK fog05 team, <fog05@adlink-labs.tech>
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/atolab/fog05-manager/pkg/apis/fdu/v1"
	scheme "github.com/atolab/fog05-manager/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FDUsGetter has a method to return a FDUInterface.
// A group's client should implement this interface.
type FDUsGetter interface {
	FDUs(namespace string) FDUInterface
}

// FDUInterface has methods to work with FDU resources.
type FDUInterface interface {
	Create(ctx context.Context, fDU *v1.FDU, opts metav1.CreateOptions) (*v1.FDU, error)
	Update(ctx context.Context, fDU *v1.FDU, opts metav1.UpdateOptions) (*v1.FDU, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.FDU, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.FDUList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FDU, err error)
	FDUExpansion
}

// fDUs implements FDUInterface
type fDUs struct {
	client rest.Interface
	ns     string
}

// newFDUs returns a FDUs
func newFDUs(c *Fog05V1Client, namespace string) *fDUs {
	return &fDUs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the fDU, and returns the corresponding fDU object, and an error if there is any.
func (c *fDUs) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.FDU, err error) {
	result = &v1.FDU{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fdus").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FDUs that match those selectors.
func (c *fDUs) List(ctx context.Context, opts metav1.ListOptions) (result *v1.FDUList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.FDUList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("fdus").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested fDUs.
func (c *fDUs) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("fdus").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a fDU and creates it.  Returns the server's representation of the fDU, and an error, if there is any.
func (c *fDUs) Create(ctx context.Context, fDU *v1.FDU, opts metav1.CreateOptions) (result *v1.FDU, err error) {
	result = &v1.FDU{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("fdus").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(fDU).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a fDU and updates it. Returns the server's representation of the fDU, and an error, if there is any.
func (c *fDUs) Update(ctx context.Context, fDU *v1.FDU, opts metav1.UpdateOptions) (result *v1.FDU, err error) {
	result = &v1.FDU{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("fdus").
		Name(fDU.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(fDU).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the fDU and deletes it. Returns an error if one occurs.
func (c *fDUs) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("fdus").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *fDUs) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("fdus").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched fDU.
func (c *fDUs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.FDU, err error) {
	result = &v1.FDU{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("fdus").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
