/*
* Copyright (c) 2018,2021 ADLINK Technology Inc.
*
* This program and the accompanying materials are made available under the
* terms of the Eclipse Public License 2.0 which is available at
* http://www.eclipse.org/legal/epl-2.0, or the Apache Software License 2.0
* which is available at https://www.apache.org/licenses/LICENSE-2.0.
*
* SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
* Contributors:
*   ADLINK fog05 team, <fog05@adlink-labs.tech>
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/atolab/fog05-manager/pkg/apis/fdu/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FDULister helps list FDUs.
// All objects returned here must be treated as read-only.
type FDULister interface {
	// List lists all FDUs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FDU, err error)
	// FDUs returns an object that can list and get FDUs.
	FDUs(namespace string) FDUNamespaceLister
	FDUListerExpansion
}

// fDULister implements the FDULister interface.
type fDULister struct {
	indexer cache.Indexer
}

// NewFDULister returns a new FDULister.
func NewFDULister(indexer cache.Indexer) FDULister {
	return &fDULister{indexer: indexer}
}

// List lists all FDUs in the indexer.
func (s *fDULister) List(selector labels.Selector) (ret []*v1.FDU, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FDU))
	})
	return ret, err
}

// FDUs returns an object that can list and get FDUs.
func (s *fDULister) FDUs(namespace string) FDUNamespaceLister {
	return fDUNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FDUNamespaceLister helps list and get FDUs.
// All objects returned here must be treated as read-only.
type FDUNamespaceLister interface {
	// List lists all FDUs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FDU, err error)
	// Get retrieves the FDU from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FDU, error)
	FDUNamespaceListerExpansion
}

// fDUNamespaceLister implements the FDUNamespaceLister
// interface.
type fDUNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FDUs in the indexer for a given namespace.
func (s fDUNamespaceLister) List(selector labels.Selector) (ret []*v1.FDU, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FDU))
	})
	return ret, err
}

// Get retrieves the FDU from the indexer for a given namespace and name.
func (s fDUNamespaceLister) Get(name string) (*v1.FDU, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("fdu"), name)
	}
	return obj.(*v1.FDU), nil
}
